- valid_until_msg = t('error_messages.listings.valid_until')

= js_t ["listings.form.images.processing", "listings.form.images.this_may_take_a_while", "listings.form.images.percentage_loaded", "listings.form.images.uploading_failed", "listings.form.images.file_too_large", "listings.form.images.image_processing_failed", "listings.form.images.accepted_formats", "listings.form.images.loading_image", "listings.form.images.select_file", "listings.form.images.removing", "listings.form.images.add_more"], run_js_immediately

- content_for :listing_js do
  :javascript
    $(document).ready(function() {
      var listingImageOpts = #{raw ListingImageS3OptionsJSAdapter.new(@listing).to_json}
      var listingImages = #{raw @listing.listing_images.map { |image| ListingImageJSAdapter.new(image) }.to_json }

      window.ST.initialize_new_listing_form("#{t('listings.form.images.no_file_selected')}", "#{t('listings.form.images.select_file')}", "#{I18n.locale}", "#{t('error_messages.listings.share_type')}", "#{valid_until_msg}", "#{listing_id}", "#{shape[:price_enabled]}","#{t('error_messages.listings.price')}","#{minimum_price_cents}","#{Money::Currency.new(@current_community.currency).subunit_to_unit}","#{t('error_messages.listings.minimum_price', :minimum_price => Money.new(minimum_price_cents, @current_community.currency), :currency => @current_community.currency)}", #{raw @numeric_field_ids.collect { |numeric_field_id| "custom_fields[#{numeric_field_id}]" }.to_json }, listingImages, listingImageOpts, "#{t('listings.form.images.images_not_uploaded_confirm')}" );

      var pr = null;
      if ("#{shape[:price_enabled]}" == "true") {
        pr = true;
      } else {
        pr = false;
      }

      numeric_field_names = #{raw @numeric_field_ids.collect { |numeric_field_id| "custom_fields[#{numeric_field_id}]" }.to_json }

      var numericRules = numeric_field_names.reduce(function(rules, name) {
        var el = module.utils.findElementByName(name);
        var min = el.data("min");
        var max = el.data("max");

        rules[name] = {number_min: min, number_max: max};

        return rules;
      }, {});

      var form_id = ("#{listing_id}" == "false") ? "#new_listing" : ("#edit_listing_" + "#{listing_id}");


      $(form_id).validate({
        errorPlacement: function(error, element) {
          if (element.attr("name") == "listing[valid_until(1i)]") {
            error.appendTo(element.parent());
          } else if (element.attr("name") == "listing[price]") {
            error.appendTo(element.parent());
          } else if ($(element).hasClass("custom_field_checkbox")) {
            var container = $(element).closest(".checkbox-group-container");
            error.insertAfter(container);
          } else if ($(element).hasClass("delivery-method-checkbox")) {
            error.insertAfter($(".delivery-options-container"));
          } else if (element.attr("name") == "listing[shipping_price]") {
            error.insertAfter($(".shipping-price-default"));
          } else if (element.attr("name") == "listing[shipping_price_additional]") {
            error.insertAfter($(".js-shipping-price-additional"));
          } else {
            error.insertAfter(element);
          }
        },
        debug: false,
        rules: _.extend(numericRules, {
          "listing[author_id]": {required: true, remote: "/admin/people/validate_listing_author"},
          "listing[buyer_id]": {required: true, remote: "/listings/validate_listing_buyer"},
          "listing[title]": {required: true, minlength: 2, maxlength: 60},
          "listing[origin]": {address_validator: true},
          "listing[price]": {required: pr, money: true, minimum_price_required: ["#{minimum_price_cents}", "#{Money::Currency.new(@current_community.currency).subunit_to_unit}"]},
          "listing[shipping_price]": {money: true},
          "listing[shipping_price_additional]": {money: true},
          "listing[valid_until(1i)]": { min_date: true, max_date: true }
        }),
        messages: {
          "listing[author_id]": {remote: "Please select a valid user!"},
          "listing[buyer_id]": {remote: "Please select a valid buyer!"},
          "listing[valid_until(1i)]": { min_date: "#{valid_until_msg}", max_date: "#{valid_until_msg}" },
          "listing[price]": { money: "Enter numbers only, no Symbols.", minimum_price_required: "#{t('error_messages.listings.minimum_price', :minimum_price => Money.new(minimum_price_cents, @current_community.currency), :currency => @current_community.currency)}" },
          "listing[shipping_price]": {money: "Enter numbers only, no Symbols."},
          "listing[shipping_price_additional]": {money: "Enter numbers only, no Symbols."}
        },
        onkeyup: false,
        onclick: false,
        onfocusout: false,
        onsubmit: true
      });
    });

- if run_js_immediately
  = yield :listing_js
- else
  - content_for :extra_javascript do
    = yield :listing_js
